// Code generated by protoc-gen-go. DO NOT EDIT.
// source: matias_service.proto

package MatiasService

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RequestMatiasKeyRequest struct {
}

func (m *RequestMatiasKeyRequest) Reset()                    { *m = RequestMatiasKeyRequest{} }
func (m *RequestMatiasKeyRequest) String() string            { return proto.CompactTextString(m) }
func (*RequestMatiasKeyRequest) ProtoMessage()               {}
func (*RequestMatiasKeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type RequestMatiasKeyResponse struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *RequestMatiasKeyResponse) Reset()                    { *m = RequestMatiasKeyResponse{} }
func (m *RequestMatiasKeyResponse) String() string            { return proto.CompactTextString(m) }
func (*RequestMatiasKeyResponse) ProtoMessage()               {}
func (*RequestMatiasKeyResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *RequestMatiasKeyResponse) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func init() {
	proto.RegisterType((*RequestMatiasKeyRequest)(nil), "MatiasService.RequestMatiasKeyRequest")
	proto.RegisterType((*RequestMatiasKeyResponse)(nil), "MatiasService.RequestMatiasKeyResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Matias service

type MatiasClient interface {
	ListenChanges(ctx context.Context, in *ListenEventsRequest, opts ...grpc.CallOption) (Matias_ListenChangesClient, error)
}

type matiasClient struct {
	cc *grpc.ClientConn
}

func NewMatiasClient(cc *grpc.ClientConn) MatiasClient {
	return &matiasClient{cc}
}

func (c *matiasClient) ListenChanges(ctx context.Context, in *ListenEventsRequest, opts ...grpc.CallOption) (Matias_ListenChangesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Matias_serviceDesc.Streams[0], c.cc, "/MatiasService.Matias/listenChanges", opts...)
	if err != nil {
		return nil, err
	}
	x := &matiasListenChangesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Matias_ListenChangesClient interface {
	Recv() (*EventItem, error)
	grpc.ClientStream
}

type matiasListenChangesClient struct {
	grpc.ClientStream
}

func (x *matiasListenChangesClient) Recv() (*EventItem, error) {
	m := new(EventItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Matias service

type MatiasServer interface {
	ListenChanges(*ListenEventsRequest, Matias_ListenChangesServer) error
}

func RegisterMatiasServer(s *grpc.Server, srv MatiasServer) {
	s.RegisterService(&_Matias_serviceDesc, srv)
}

func _Matias_ListenChanges_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MatiasServer).ListenChanges(m, &matiasListenChangesServer{stream})
}

type Matias_ListenChangesServer interface {
	Send(*EventItem) error
	grpc.ServerStream
}

type matiasListenChangesServer struct {
	grpc.ServerStream
}

func (x *matiasListenChangesServer) Send(m *EventItem) error {
	return x.ServerStream.SendMsg(m)
}

var _Matias_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MatiasService.Matias",
	HandlerType: (*MatiasServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "listenChanges",
			Handler:       _Matias_ListenChanges_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "matias_service.proto",
}

func init() { proto.RegisterFile("matias_service.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 169 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xc9, 0x4d, 0x2c, 0xc9,
	0x4c, 0x2c, 0x8e, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0xe2, 0xf5, 0x05, 0x8b, 0x06, 0x43, 0x04, 0xa5, 0x84, 0x73, 0x32, 0x8b, 0x4b, 0x52, 0xf3,
	0xe2, 0x53, 0xcb, 0x52, 0xf3, 0x4a, 0x8a, 0x21, 0x6a, 0x94, 0x24, 0xb9, 0xc4, 0x83, 0x52, 0x0b,
	0x4b, 0x53, 0x8b, 0x4b, 0x20, 0x8a, 0xbd, 0x53, 0x2b, 0xa1, 0x7c, 0x25, 0x1d, 0x2e, 0x09, 0x4c,
	0xa9, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x01, 0x2e, 0xe6, 0xec, 0xd4, 0x4a, 0x09, 0x46,
	0x05, 0x46, 0x0d, 0xce, 0x20, 0x10, 0xd3, 0x28, 0x9a, 0x8b, 0x0d, 0xa2, 0x4c, 0x28, 0x90, 0x8b,
	0x17, 0x62, 0x93, 0x73, 0x46, 0x62, 0x5e, 0x7a, 0x6a, 0xb1, 0x90, 0x92, 0x1e, 0x8a, 0x43, 0xf4,
	0x7c, 0xc0, 0xb2, 0xae, 0x60, 0x67, 0x40, 0x6d, 0x90, 0x92, 0x40, 0x53, 0x03, 0x96, 0xf5, 0x2c,
	0x49, 0xcd, 0x55, 0x62, 0x30, 0x60, 0x4c, 0x62, 0x03, 0x3b, 0xd6, 0x18, 0x10, 0x00, 0x00, 0xff,
	0xff, 0x63, 0x5a, 0x3e, 0xef, 0xe8, 0x00, 0x00, 0x00,
}
